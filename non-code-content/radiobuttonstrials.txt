only selects so many times
DO NOT PUT YOUR RADIO BUTTONS IN RADIO GROUPS- THAT WAS THE CAUSE THE WHOLE TIME

package com.example.matthewbriffett_comp304lab2_exercise1.adapter


import android.content.Context
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.CheckBox
import android.widget.ImageView
import android.widget.RadioButton
import android.widget.TextView
import android.widget.Toast
import androidx.lifecycle.LifecycleOwner
import androidx.lifecycle.Observer
import androidx.recyclerview.widget.RecyclerView


import com.example.matthewbriffett_comp304lab2_exercise1.R
import com.example.matthewbriffett_comp304lab2_exercise1.data.Home


/**
 * Adapter for the [RecyclerView] in all home fragments (ApartmentFragment, CondoFragment, etc. Displays [Home] data object.
 */
class SelectedHomeAdapter (
    private val context: Context,
    private var dataset: List<Home>,
    private val viewModel: SharedViewModel,
    private val viewLifecycleOwner: LifecycleOwner
) : RecyclerView.Adapter<SelectedHomeAdapter.ItemViewHolder>() {

    private var selectedPosition = RecyclerView.NO_POSITION

    private var selectedDataSet: MutableList<Home> = mutableListOf<Home>()

    init {
        setHasStableIds(true)
    }

    override fun getItemId(position: Int): Long {
        return dataset[position].itemId
    }

    inner class ItemViewHolder(private val view: View) : RecyclerView.ViewHolder(view) {

        val imageView: ImageView = view.findViewById(R.id.homeImageView)
        val textView: TextView = view.findViewById(R.id.homeTextView)
        val radioButton: RadioButton = view.findViewById(R.id.homeCheckBox)

        init {
            radioButton.setOnClickListener {
                val previousSelectedPosition = selectedPosition
                if (adapterPosition == selectedPosition) {
                    selectedPosition = RecyclerView.NO_POSITION
                } else {
                    selectedPosition = adapterPosition
                }
                notifyItemChanged(previousSelectedPosition)
                notifyItemChanged(selectedPosition)

                println("SelectedHomeAdapter - radioButton.setOnClickListener - adapterPosition: $adapterPosition")
            }


        }
    }

    fun setData(data: List<Home>){
        dataset = data
    }

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ItemViewHolder {
        val adapterLayout = LayoutInflater.from(parent.context)
            .inflate(R.layout.selected_list_item, parent, false)

        return ItemViewHolder(adapterLayout)
    }

    override fun onBindViewHolder(holder: ItemViewHolder, position: Int) {
        val item = dataset[position]
        holder.textView.text = context.resources.getString(item.stringResourceId)
        holder.imageView.setImageDrawable(context.getDrawable(item.imageResourceId))
        holder.radioButton.isChecked = position == selectedPosition

        println("SelectedHomeAdapter - onBindViewHolder - position: $position")
        println("SelectedHomeAdapter - onBindViewHolder - selectedPosition: $selectedPosition")
        println("SelectedHomeAdapter - onBindViewHolder - holder.radioButton.isChecked: ${holder.radioButton.isChecked}")
        println("SelectedHomeAdapter - onBindViewHolder - holder.layoutPosition: ${holder.layoutPosition}")
    }



    override fun getItemCount() = dataset.size
}
