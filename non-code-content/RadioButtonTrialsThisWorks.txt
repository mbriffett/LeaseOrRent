this works
DO NOT PUT YOUR RADIO BUTTONS IN RADIO GROUPS- THAT WAS THE CAUSE THE WHOLE TIME

package com.example.matthewbriffett_comp304lab2_exercise1.adapter

import android.content.Context
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.ImageView
import android.widget.RadioButton
import android.widget.TextView
import androidx.lifecycle.LifecycleOwner
import androidx.recyclerview.widget.RecyclerView
import com.example.matthewbriffett_comp304lab2_exercise1.R
import com.example.matthewbriffett_comp304lab2_exercise1.data.Home

/**
 * Adapter for the [RecyclerView] in all home fragments (ApartmentFragment, CondoFragment, etc. Displays [Home] data object.
 */
class SelectedHomeAdapter(
    private val context: Context,
    private var dataset: List<Home>,
    private val viewModel: SharedViewModel,
    private val viewLifecycleOwner: LifecycleOwner
) : RecyclerView.Adapter<SelectedHomeAdapter.ItemViewHolder>() {

    private var selectedPosition = RecyclerView.NO_POSITION

    private var selectedDataSet: MutableList<Home> = mutableListOf<Home>()

    init {
        setHasStableIds(true)
    }

    override fun getItemId(position: Int): Long {
        return dataset[position].itemId
    }

    inner class ItemViewHolder(private val view: View) : RecyclerView.ViewHolder(view) {
        val imageView: ImageView = view.findViewById(R.id.homeImageView)
        val textView: TextView = view.findViewById(R.id.homeTextView)
        val radioButton: RadioButton = view.findViewById(R.id.homeRadioButton)
    }


    fun setData(data: List<Home>) {
        dataset = data
    }

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ItemViewHolder {
        val adapterLayout = LayoutInflater.from(parent.context)
            .inflate(R.layout.selected_list_item, parent, false)

        return ItemViewHolder(adapterLayout)
    }


    override fun onBindViewHolder(holder: ItemViewHolder, position: Int) {
        val item = dataset[holder.adapterPosition]
        holder.imageView.setImageDrawable(context.getDrawable(item.imageResourceId))
        holder.textView.text = context.resources.getString(item.stringResourceId)


        // Set listener to null
        holder.radioButton.setOnCheckedChangeListener(null)

        // Change checked state
        holder.radioButton.isChecked = holder.adapterPosition == selectedPosition

        // Set listener again
        holder.radioButton.setOnCheckedChangeListener { buttonView, isChecked ->
            if (isChecked) {
                val previousSelectedPosition = selectedPosition
                selectedPosition = holder.adapterPosition
                holder.radioButton.post {
                    println("SelectedHomeAdapter - onCheckedChangedListener -  selectedPosition: $selectedPosition")
                    println("SelectedHomeAdapter - onCheckedChangedListener -  isChecked: $isChecked")
                    println("SelectedHomeAdapter - onCheckedChangedListener -  adapterPosition: ${holder.adapterPosition}")
                    notifyItemChanged(previousSelectedPosition)
                    notifyItemChanged(selectedPosition)
                }
            }
        }
    }
    override fun getItemCount() = dataset.size

}
